// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CANDIDATE
  RECRUITER
  ADMIN
}

enum CVStatus {
  DRAFT
  PUBLISHED
  PRIVATE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile   UserProfile?
  cv        CV?
  searches  Search[]      @relation("RecruiterSearches")
  auditLogs AuditLog[]

  @@map("users")
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String?
  lastName  String?
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model CV {
  id          String   @id @default(cuid())
  userId      String   @unique
  status      CVStatus @default(DRAFT)
  title       String?
  summary     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalDetails PersonalDetails?
  education       Education[]
  experience      Experience[]
  skills          Skill[]
  certifications  Certification[]
  languages       Language[]

  @@map("cvs")
}

model PersonalDetails {
  id          String   @id @default(cuid())
  cvId        String   @unique
  fullName    String
  email       String
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  linkedinUrl String?
  githubUrl   String?
  website     String?
  availability String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("personal_details")
}

model Education {
  id           String    @id @default(cuid())
  cvId         String
  institution  String
  degree       String
  field        String?
  startDate    DateTime
  endDate      DateTime?
  gpa          Float?
  description  String?
  isCurrent    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("education")
}

model Experience {
  id          String    @id @default(cuid())
  cvId        String
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String?
  isCurrent   Boolean   @default(false)
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("experience")
}

model Skill {
  id        String   @id @default(cuid())
  cvId      String
  name      String
  level     String?  // Beginner, Intermediate, Advanced, Expert
  category  String?  // Technical, Soft Skills, Languages, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Certification {
  id          String    @id @default(cuid())
  cvId        String
  name        String
  issuer      String
  issueDate   DateTime
  expiryDate  DateTime?
  credentialId String?
  credentialUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("certifications")
}

model Language {
  id        String   @id @default(cuid())
  cvId      String
  name      String
  proficiency String // Native, Fluent, Intermediate, Basic
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cv CV @relation(fields: [cvId], references: [id], onDelete: Cascade)

  @@map("languages")
}

model Search {
  id          String   @id @default(cuid())
  recruiterId String
  name        String
  filters     Json     // Store search filters as JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recruiter User @relation("RecruiterSearches", fields: [recruiterId], references: [id], onDelete: Cascade)

  @@map("searches")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
